// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	apiErrors "github.com/ssoql/faq-service/utils/apiErrors"

	entities "github.com/ssoql/faq-service/internal/app/entities"

	mock "github.com/stretchr/testify/mock"
)

// FaqWriteRepository is an autogenerated mock type for the FaqWriteRepository type
type FaqWriteRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, faq
func (_m *FaqWriteRepository) Delete(ctx context.Context, faq *entities.Faq) apiErrors.ApiError {
	ret := _m.Called(ctx, faq)

	var r0 apiErrors.ApiError
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Faq) apiErrors.ApiError); ok {
		r0 = rf(ctx, faq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apiErrors.ApiError)
		}
	}

	return r0
}

// Insert provides a mock function with given fields: ctx, faq
func (_m *FaqWriteRepository) Insert(ctx context.Context, faq *entities.Faq) apiErrors.ApiError {
	ret := _m.Called(ctx, faq)

	var r0 apiErrors.ApiError
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Faq) apiErrors.ApiError); ok {
		r0 = rf(ctx, faq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apiErrors.ApiError)
		}
	}

	return r0
}

// Update provides a mock function with given fields: ctx, faq
func (_m *FaqWriteRepository) Update(ctx context.Context, faq *entities.Faq) apiErrors.ApiError {
	ret := _m.Called(ctx, faq)

	var r0 apiErrors.ApiError
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Faq) apiErrors.ApiError); ok {
		r0 = rf(ctx, faq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apiErrors.ApiError)
		}
	}

	return r0
}

type mockConstructorTestingTNewFaqWriteRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewFaqWriteRepository creates a new instance of FaqWriteRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFaqWriteRepository(t mockConstructorTestingTNewFaqWriteRepository) *FaqWriteRepository {
	mock := &FaqWriteRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
